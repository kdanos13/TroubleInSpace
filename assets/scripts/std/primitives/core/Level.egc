<?xml version="1.0" encoding="utf-8"?>
<Entity extends="std.core.Base">
	<_States>
		<State>
			<Id>viewReferences</Id>
			<Type>Dynamic</Type>
			<Value>null</Value>
		</State>
		
		<State>
			<Id>moduleReferences</Id>
			<Type>Dynamic</Type>
			<Value>null</Value>
		</State>
		
		<State>
			<Id>cameraReferences</Id>
			<Type>Dynamic</Type>
			<Value>null</Value>
		</State>
		
		<State>
			<Id>stageAreaReferences</Id>
			<Type>Dynamic</Type>
			<Value>null</Value>
		</State>
	
		<State>
			<Id>created</Id>
			<Type>Boolean</Type>
			<Value>false</Value>
		</State>
		
		<State>
			<Id>views</Id>
			<Type>Dynamic</Type>
			<Value>null</Value>
		</State>
	
		<State>
			<Id>cameras</Id>
			<Type>Dynamic</Type>
			<Value>null</Value>
		</State>
	</_States>
		
	<_Actions>
		<Action>
			<Id>Find References</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					//Figure out References here
					var moduleReferences = [];
					var viewReferences = [];
					var cameraReferences = [];
					var stageAreaReferences = [];
					
					for (child of me.getChildren())
					{
						if (child.getState('type') == 'Module')
							moduleReferences.push(child);
						else if (child.getState('type') == 'View')
							viewReferences.push(child);
						else if (child.getState('type') == 'Camera')
							cameraReferences.push(child);
						else if (child.getState('type') == 'StageArea')
							stageAreaReferences.push(child);
					}
					
					//Store later, break this function to tiny private ones ofc..
					me.setState('moduleReferences', moduleReferences);
					me.setState('viewReferences', viewReferences);
					me.setState('cameraReferences', cameraReferences);
					me.setState('stageAreaReferences', stageAreaReferences);
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Init Level</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					it.stop();
					
					me.fa('Refresh Cameras');
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Refresh Cameras</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					Display.de("REFRESHING CAMERAS");
					//Refresh Camera (not sure if this is the right place)
					me.sa('CameraUpdateDelayFrames',{delay:1});
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>CameraUpdateDelayFrames</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
				    it.addToState('delayCurrent',1);
				    
				    if (it.getState('delayCurrent')>it.getState('delay'))
				    {
					    it.stop();
					    
					    //Callback (Action finished)
						it.setState('delayCurrent',0);
						
						//Refresh Cameras
						for (camera of me.s('cameras'))
							camera.sa('Camera Update');
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>delayCurrent</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>delay</Id><Type>Decimal</Type><Value>0</Value></State>
			</States>
		</Action>
	</_Actions>
</Entity>